const UIManager = {
    elements: {
        statusText: null,
        serverDisplay: null,
        previewFrame: null,
        previewPlaceholder: null,
        printerSelect: null,
        statusMessage: null,
        printButton: null,
        loadingOverlay: null,
        refreshPrintersBtn: null,
        loadingMainText: null,
        loadingProgress: null
    },
    
    loadingSteps: ['init', 'server', 'printers', 'ready'],
    currentStep: 0,
  
    init() {
        this.elements = {
            statusText: document.getElementById('status-text'),
            serverDisplay: document.getElementById('server-display'),
            previewFrame: document.getElementById('preview-frame'),
            previewPlaceholder: document.getElementById('preview-placeholder'),
            printerSelect: document.getElementById('printer-select'),
            statusMessage: document.getElementById('status-message'),
            printButton: document.getElementById('print-button'),
            loadingOverlay: document.getElementById('loading-overlay'),
            refreshPrintersBtn: document.getElementById('refresh-printers'),
            loadingMainText: document.getElementById('loading-main-text'),
            loadingProgress: document.getElementById('loading-progress')
        };
    },
  
    handleOutputTypeChange() {
        const selectedType = this.getSelectedOutputType();
        if (selectedType === 'printer') {
            this.elements.printerGroup.classList.add('show');
        } else {
            this.elements.printerGroup.classList.remove('show');
        }
        this.updatePrintButtonText();
    },
  
    getSelectedOutputType() {
        return 'printer'; // Ìï≠ÏÉÅ ÌîÑÎ¶∞ÌÑ∞ Ï∂úÎ†•
    },
  
    updatePrintButtonText() {
        const btn = this.elements.printButton;
        if (!btn.disabled || btn.textContent.includes('Ï§ë...')) {
            btn.textContent = 'üñ®Ô∏è Ïù∏ÏáÑÌïòÍ∏∞';
        }
    },
  
    showLoading(show = true) {
        if (this.elements.loadingOverlay) {
            this.elements.loadingOverlay.classList.toggle('hidden', !show);
            if (show) {
                this.currentStep = 0;
                this.updateLoadingStep('init');
            }
        }
    },
    
    updateLoadingStep(stepName, customText = null) {
        const stepIndex = this.loadingSteps.indexOf(stepName);
        if (stepIndex === -1) return;
        
        // Ïù¥Ï†Ñ Îã®Í≥ÑÎì§ÏùÑ ÏôÑÎ£åÎ°ú ÌëúÏãú
        for (let i = 0; i < stepIndex; i++) {
            const step = this.loadingSteps[i];
            const stepElement = document.getElementById(`step-${step}`);
            if (stepElement) {
                stepElement.classList.remove('active');
                stepElement.classList.add('completed');
                const icon = stepElement.querySelector('.step-icon');
                if (icon) {
                    icon.innerHTML = '‚úì';
                }
            }
        }
        
        // ÌòÑÏû¨ Îã®Í≥ÑÎ•º ÌôúÏÑ±Ìôî
        const currentStepElement = document.getElementById(`step-${stepName}`);
        if (currentStepElement) {
            currentStepElement.classList.remove('completed');
            currentStepElement.classList.add('active');
            const icon = currentStepElement.querySelector('.step-icon');
            if (icon) {
                icon.innerHTML = stepIndex + 1;
            }
        }
        
        // Î©îÏù∏ ÌÖçÏä§Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏
        const messages = {
            init: 'Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖòÏùÑ Ï¥àÍ∏∞ÌôîÌïòÍ≥† ÏûàÏäµÎãàÎã§...',
            server: 'ÏÑúÎ≤ÑÏôÄ Ïó∞Í≤∞ÏùÑ ÌôïÏù∏ÌïòÍ≥† ÏûàÏäµÎãàÎã§...',
            printers: 'ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÌîÑÎ¶∞ÌÑ∞Î•º Í≤ÄÏÉâÌïòÍ≥† ÏûàÏäµÎãàÎã§...',
            ready: 'Î™®Îì† Ï§ÄÎπÑÍ∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!'
        };
        
        if (this.elements.loadingMainText) {
            this.elements.loadingMainText.textContent = customText || messages[stepName] || 'Î°úÎî© Ï§ë...';
        }
        
        if (this.elements.loadingProgress) {
            const progressPercent = Math.round(((stepIndex + 1) / this.loadingSteps.length) * 100);
            this.elements.loadingProgress.textContent = `${progressPercent}% ÏôÑÎ£å`;
        }
        
        this.currentStep = stepIndex;
    },
    
    completeLoading() {
        this.updateLoadingStep('ready');
        
        // ÏôÑÎ£å ÌõÑ Ïû†Ïãú ÎåÄÍ∏∞ ÌõÑ Ïà®Í∏∞Í∏∞
        setTimeout(() => {
            this.showLoading(false);
        }, 800);
    },
  
    showStatus(message, type = 'info') {
        const elem = this.elements.statusMessage;
        if (elem) {
            elem.textContent = message;
            elem.className = `status-message ${type}`;
            elem.style.display = 'block';
            
            if (type === 'success' || type === 'error') {
                setTimeout(() => {
                    elem.style.display = 'none';
                }, 3000);
            }
        }
    },
  
    updateServerInfo(serverInfo) {
        if (serverInfo) {
            this.elements.statusText.textContent = `Ï§ÄÎπÑ ÏôÑÎ£å - Ìè¨Ìä∏: ${serverInfo.port}`;
            this.elements.serverDisplay.textContent = `ÏÑ∏ÏÖò: ${serverInfo.session}`;
        }
    },
  
    updatePrinterList(printers) {
        const select = this.elements.printerSelect;
        while (select.children.length > 1) {
            select.removeChild(select.lastChild);
        }
        
        printers.forEach(printer => {
            const option = document.createElement('option');
            option.value = printer.name;
            option.textContent = `${printer.displayName || printer.name} ${printer.isDefault ? '(Í∏∞Î≥∏)' : ''}`;
            select.appendChild(option);
        });
        
        const defaultPrinter = printers.find(p => p.isDefault);
        if (defaultPrinter) {
            select.value = defaultPrinter.name;
        }
    },
  
    showPreview(url) {
        console.log('UIManager.showPreview Ìò∏Ï∂úÎê®:', url);
        
        if (!url) {
            console.log('URLÏù¥ ÏóÜÏñ¥ÏÑú ÎØ∏Î¶¨Î≥¥Í∏∞Î•º Ïà®ÍπÅÎãàÎã§');
            this.hidePreview();
            return;
        }
        
        const iframe = this.elements.previewFrame;
        const placeholder = this.elements.previewPlaceholder;
        
        console.log('iframe ÏöîÏÜå:', iframe);
        console.log('placeholder ÏöîÏÜå:', placeholder);
        
        if (!iframe) {
            console.error('iframe ÏöîÏÜåÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§');
            this.showStatus('ÎØ∏Î¶¨Î≥¥Í∏∞ ÏöîÏÜåÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§', 'error');
            return;
        }
        
        this.showStatus('ÎØ∏Î¶¨Î≥¥Í∏∞ Î°úÎî© Ï§ë...', 'info');
        
        // iframeÏùÑ Î®ºÏ†Ä ÌëúÏãúÌïòÍ≥† placeholder Ïà®ÍπÄ
        iframe.style.display = 'block';
        iframe.style.visibility = 'visible';
        iframe.style.opacity = '1';
        
        if (placeholder) {
            placeholder.style.display = 'none';
        }
        
        // iframe Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï
        iframe.onload = () => {
            console.log('‚úÖ iframe Î°úÎìú ÏôÑÎ£å:', url);
            this.showStatus('ÎØ∏Î¶¨Î≥¥Í∏∞ Î°úÎìú ÏôÑÎ£å', 'success');
            if (placeholder) {
                placeholder.style.display = 'none';
            }
            iframe.style.display = 'block';
        };
        
        iframe.onerror = (error) => {
            console.error('‚ùå iframe Î°úÎìú Ïã§Ìå®:', url, error);
            this.showStatus('ÎØ∏Î¶¨Î≥¥Í∏∞ Î°úÎìú Ïã§Ìå®', 'error');
            if (placeholder) {
                placeholder.style.display = 'flex';
            }
        };
        
        // Î≥¥Ïïà Ï†ïÏ±ÖÏúºÎ°ú Ïù∏Ìïú Î°úÎìú Ïã§Ìå® Í∞êÏßÄ
        const checkLoad = () => {
            try {
                // iframeÏùò contentDocument Ï†ëÍ∑ºÏùÑ ÏãúÎèÑÌï¥ÏÑú CORS Ïò§Î•ò Í∞êÏßÄ
                const doc = iframe.contentDocument;
                if (doc && doc.readyState === 'complete') {
                    console.log('‚úÖ iframe ÏΩòÌÖêÏ∏† Î°úÎìú ÌôïÏù∏Îê®');
                }
            } catch (e) {
                if (e.name === 'SecurityError') {
                    console.log('‚ö†Ô∏è CORSÎ°ú Ïù∏Ìïú Ï†ëÍ∑º Ï†úÌïú (Ï†ïÏÉÅÏ†ÅÏù∏ Ïô∏Î∂Ä ÏÇ¨Ïù¥Ìä∏ Î°úÎìú)');
                } else {
                    console.error('‚ùå iframe ÏΩòÌÖêÏ∏† Ï†ëÍ∑º Ïò§Î•ò:', e);
                }
            }
        };
        
        console.log('üîó iframe src ÏÑ§Ï†ï Ï§ë:', url);
        iframe.src = url;
        console.log('üîó iframe src ÏÑ§Ï†ï ÏôÑÎ£å, ÌòÑÏû¨ src:', iframe.src);
        
        // Î°úÎìú ÏÉÅÌÉú Ï≤¥ÌÅ¨ (Ïó¨Îü¨ ÏãúÏ†êÏóêÏÑú)
        setTimeout(checkLoad, 1000);
        setTimeout(checkLoad, 3000);
        setTimeout(checkLoad, 5000);
        
        // iframe ÌëúÏãú Í∞ïÏ†ú ÌôïÏù∏ (ÎîîÎ≤ÑÍπÖÏö©)
        setTimeout(() => {
            this.debugIframeState();
        }, 2000);
    },
    
    hidePreview() {
        const iframe = this.elements.previewFrame;
        const placeholder = this.elements.previewPlaceholder;
        
        iframe.src = '';
        if (placeholder) {
            placeholder.style.display = 'flex';
        }
    },
  
    updatePrintButton(enabled) {
        this.elements.printButton.disabled = !enabled;
        this.updatePrintButtonText();
    },
  
    setPrintButtonLoading(loading, customText = null) {
        const btn = this.elements.printButton;
        btn.disabled = loading;
        if (loading) {
            btn.textContent = customText || 'üñ®Ô∏è Ïù∏ÏáÑ Ï§ë...';
            btn.classList.add('loading');
        } else {
            btn.classList.remove('loading');
            this.updatePrintButtonText();
        }
    },
  
    displayPaperSize(paperSize) {
        if (paperSize && this.elements.serverDisplay) {
            const sizeText = `${paperSize.width}mm √ó ${paperSize.height}mm`;
            this.elements.serverDisplay.innerHTML += `<br>Ïö©ÏßÄ: ${sizeText}`;
        }
    },
  
    isRotate180Checked() {
        return false; // 180ÎèÑ ÌöåÏ†Ñ Í∏∞Îä• ÎπÑÌôúÏÑ±Ìôî
    },
    
    // ÎîîÎ≤ÑÍπÖÏö© iframe ÏÉÅÌÉú Ï≤¥ÌÅ¨ Ìï®Ïàò
    debugIframeState() {
        const iframe = this.elements.previewFrame;
        const placeholder = this.elements.previewPlaceholder;
        
        console.group('üîç iframe ÎîîÎ≤ÑÍ∑∏ Ï†ïÎ≥¥');
        console.log('iframe ÏöîÏÜå Ï°¥Ïû¨:', !!iframe);
        console.log('placeholder ÏöîÏÜå Ï°¥Ïû¨:', !!placeholder);
        
        if (iframe) {
            console.log('iframe.src:', iframe.src);
            console.log('iframe.style.display:', iframe.style.display);
            console.log('iframe.style.visibility:', iframe.style.visibility);
            console.log('iframe.style.opacity:', iframe.style.opacity);
            console.log('iframe.style.zIndex:', iframe.style.zIndex);
            console.log('iframe ÌÅ¨Í∏∞:', { width: iframe.offsetWidth, height: iframe.offsetHeight });
            console.log('iframe ÏúÑÏπò:', { top: iframe.offsetTop, left: iframe.offsetLeft });
            
            try {
                const computedStyle = window.getComputedStyle(iframe);
                console.log('Í≥ÑÏÇ∞Îêú Ïä§ÌÉÄÏùº:');
                console.log('- display:', computedStyle.display);
                console.log('- visibility:', computedStyle.visibility);
                console.log('- opacity:', computedStyle.opacity);
                console.log('- z-index:', computedStyle.zIndex);
            } catch (e) {
                console.log('Ïä§ÌÉÄÏùº Í≥ÑÏÇ∞ Ïò§Î•ò:', e);
            }
        }
        
        if (placeholder) {
            console.log('placeholder.style.display:', placeholder.style.display);
        }
        console.groupEnd();
    }
  };