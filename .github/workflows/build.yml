name: Build & Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 1.6.6)'
        required: false
        type: string
        default: ''

permissions:
  contents: write
  discussions: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [ -n "$GITHUB_REF" ] && [[ "$GITHUB_REF" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            # 기본값: package.json의 현재 버전 사용
            VERSION=$(node -e "console.log(require('./package.json').version)")
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Build version: $VERSION"

  build:
    needs: prepare
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: win
            arch: x64
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Cache Electron
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/electron
            ~/.cache/electron-builder
          key: ${{ runner.os }}-electron-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-electron-

      - name: Install dependencies
        run: yarn install --frozen-lockfile --network-timeout 300000

      - name: Update version
        run: |
          node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            const newVersion = '${{ needs.prepare.outputs.version }}';
            if (pkg.version !== newVersion) {
              pkg.version = newVersion;
              fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));
              console.log('✅ Version updated:', pkg.version);
            }
          "

      - name: Build Electron app
        run: yarn build-${{ matrix.platform }}
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          USE_HARD_LINKS: false

      - name: List build artifacts
        if: always()
        run: |
          echo "📦 Build artifacts:"
          node -e "try { const fs=require('fs'); fs.readdirSync('dist').forEach(f => console.log('  ' + f)); } catch(e) { console.log('  No artifacts found'); }"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            dist/WebPrinter-Setup-*.exe
          retention-days: 7
          if-no-files-found: error

  release:
    needs: [prepare, build]
    runs-on: ubuntu-latest
    if: success() && (startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch')
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-*
          path: dist/
          merge-multiple: true

      - name: Display structure  
        run: |
          echo "📦 Distribution files:"
          node -e "try { const fs=require('fs'); fs.readdirSync('dist').forEach(f => console.log('  ' + f)); } catch(e) { console.log('  No files found'); }"

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('v{0}', needs.prepare.outputs.version) }}
          name: WebPrinter v${{ needs.prepare.outputs.version }}
          body: |
            ## WebPrinter v${{ needs.prepare.outputs.version }}

            ### 다운로드
            - **Windows**: `WebPrinter-Setup-${{ needs.prepare.outputs.version }}.exe`

            ### 설치 방법
            1. `WebPrinter-Setup-${{ needs.prepare.outputs.version }}.exe` 파일을 다운로드
            2. 다운로드한 exe 파일을 실행하여 설치
            3. 웹페이지에서 인쇄 기능 사용 가능

            ### 변경사항
            자동 생성된 릴리즈 노트를 확인하세요.
          files: |
            dist/**/WebPrinter-Setup-*.exe
          draft: false
          prerelease: false
          generate_release_notes: true
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    needs: [prepare, release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Send notification
        shell: bash
        run: |
          if [ "${{ needs.release.result }}" = "success" ]; then
            echo "✅ Release v${{ needs.prepare.outputs.version }} completed successfully!"
          else
            echo "❌ Release v${{ needs.prepare.outputs.version }} failed!"
            exit 1
          fi