name: Build & Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  discussions: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Set version from git tag (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          echo "Git 태그에서 추출한 버전: $TAG_VERSION"
          
          # 현재 package.json 버전 확인
          CURRENT_VERSION=$(node -e "console.log(require('./package.json').version)")
          echo "현재 package.json 버전: $CURRENT_VERSION"
          
          # 버전이 다를 때만 업데이트
          if [ "$CURRENT_VERSION" != "$TAG_VERSION" ]; then
            echo "버전 업데이트: $CURRENT_VERSION → $TAG_VERSION"
            node -e "
              const fs = require('fs');
              const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
              pkg.version = '$TAG_VERSION';
              fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));
              console.log('✅ package.json 버전 업데이트 완료');
            "
          else
            echo "✅ 버전이 이미 동일함 - 업데이트 불필요"
          fi
          
          echo "최종 빌드 버전: $TAG_VERSION"

      - name: Set version from git tag (Windows)
        if: runner.os == 'Windows'
        run: |
          $TAG_VERSION = $env:GITHUB_REF -replace 'refs/tags/v', ''
          Write-Host "Git 태그에서 추출한 버전: $TAG_VERSION"
          
          # 현재 package.json 버전 확인
          $CURRENT_VERSION = (Get-Content package.json | ConvertFrom-Json).version
          Write-Host "현재 package.json 버전: $CURRENT_VERSION"
          
          # 버전이 다를 때만 업데이트
          if ($CURRENT_VERSION -ne $TAG_VERSION) {
            Write-Host "버전 업데이트: $CURRENT_VERSION → $TAG_VERSION"
            $pkg = Get-Content package.json | ConvertFrom-Json
            $pkg.version = $TAG_VERSION
            $pkg | ConvertTo-Json -Depth 100 | Set-Content package.json
            Write-Host "✅ package.json 버전 업데이트 완료"
          } else {
            Write-Host "✅ 버전이 이미 동일함 - 업데이트 불필요"
          }
          
          Write-Host "최종 빌드 버전: $TAG_VERSION"



      - name: Build Electron app (macOS)
        if: matrix.os == 'macos-latest'
        run: yarn build-mac
        env:
          # macOS는 서명 없이 빌드
          CSC_IDENTITY_AUTO_DISCOVERY: false
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # yarn 강제 사용
          npm_config_package_manager: yarn
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true

      - name: Build Electron app (Windows)
        if: matrix.os == 'windows-latest'
        run: yarn build-win
        env:
          # Windows도 서명 없이 빌드
          CSC_IDENTITY_AUTO_DISCOVERY: false
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # yarn 강제 사용
          npm_config_package_manager: yarn
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true

      - name: Upload Release Assets (macOS)
        if: matrix.os == 'macos-latest'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.dmg
            dist/*.dmg.blockmap
            dist/latest-mac.yml
          draft: false
          prerelease: false
          generate_release_notes: true
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets (Windows)
        if: matrix.os == 'windows-latest'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.exe
            dist/*.exe.blockmap
            dist/latest.yml
          draft: false
          prerelease: false
          generate_release_notes: true
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 