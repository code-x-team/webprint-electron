name: Build & Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  discussions: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Set version from git tag (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          npm version $TAG_VERSION --no-git-tag-version
          echo "Building version: $TAG_VERSION"

      - name: Set version from git tag (Windows)
        if: runner.os == 'Windows'
        run: |
          $TAG_VERSION = $env:GITHUB_REF -replace 'refs/tags/v', ''
          npm version $TAG_VERSION --no-git-tag-version
          Write-Host "Building version: $TAG_VERSION"



      - name: Build Electron app (macOS)
        if: matrix.os == 'macos-latest'
        run: yarn build-mac
        env:
          # macOS는 서명 없이 빌드
          CSC_IDENTITY_AUTO_DISCOVERY: false
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # yarn 강제 사용
          npm_config_package_manager: yarn
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true

      - name: Build Electron app (Windows)
        if: matrix.os == 'windows-latest'
        run: yarn build-win
        env:
          # Windows도 서명 없이 빌드
          CSC_IDENTITY_AUTO_DISCOVERY: false
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # yarn 강제 사용
          npm_config_package_manager: yarn
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true

      - name: Upload to GitHub Packages (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          echo "Uploading macOS files to GitHub Packages..."
          
          # gh CLI를 사용하여 Generic Package 업로드
          for file in dist/*.dmg; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "Uploading $filename to GitHub Packages..."
              
              # Generic Package 업로드 (gh api 사용)
              gh api \
                --method POST \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "/user/packages/generic/webprinter-macos/versions" \
                -f package_name="webprinter-macos" \
                -f version="$TAG_VERSION" \
                --input "$file"
              
              # blockmap 파일도 업로드
              if [ -f "${file}.blockmap" ]; then
                gh api \
                  --method POST \
                  -H "Accept: application/vnd.github+json" \
                  -H "X-GitHub-Api-Version: 2022-11-28" \
                  "/user/packages/generic/webprinter-macos-blockmap/versions" \
                  -f package_name="webprinter-macos-blockmap" \
                  -f version="$TAG_VERSION" \
                  --input "${file}.blockmap"
              fi
            fi
          done
          
          # latest-mac.yml 업로드
          if [ -f "dist/latest-mac.yml" ]; then
            gh api \
              --method POST \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "/user/packages/generic/webprinter-macos-meta/versions" \
              -f package_name="webprinter-macos-meta" \
              -f version="$TAG_VERSION" \
              --input "dist/latest-mac.yml"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload to GitHub Packages (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $TAG_VERSION = $env:GITHUB_REF -replace 'refs/tags/v', ''
          Write-Host "Uploading Windows files to GitHub Packages..."
          
          # EXE 파일 업로드
          Get-ChildItem "dist\*.exe" | ForEach-Object {
            $filename = $_.Name
            Write-Host "Uploading $filename to GitHub Packages..."
            
            # Generic Package 업로드 (gh api 사용)
            gh api `
              --method POST `
              -H "Accept: application/vnd.github+json" `
              -H "X-GitHub-Api-Version: 2022-11-28" `
              "/user/packages/generic/webprinter-windows/versions" `
              -f package_name="webprinter-windows" `
              -f version="$TAG_VERSION" `
              --input $_.FullName
            
            # blockmap 파일도 업로드
            $blockmapFile = $_.FullName + ".blockmap"
            if (Test-Path $blockmapFile) {
              gh api `
                --method POST `
                -H "Accept: application/vnd.github+json" `
                -H "X-GitHub-Api-Version: 2022-11-28" `
                "/user/packages/generic/webprinter-windows-blockmap/versions" `
                -f package_name="webprinter-windows-blockmap" `
                -f version="$TAG_VERSION" `
                --input $blockmapFile
            }
          }
          
          # latest.yml 업로드
          if (Test-Path "dist\latest.yml") {
            gh api `
              --method POST `
              -H "Accept: application/vnd.github+json" `
              -H "X-GitHub-Api-Version: 2022-11-28" `
              "/user/packages/generic/webprinter-windows-meta/versions" `
              -f package_name="webprinter-windows-meta" `
              -f version="$TAG_VERSION" `
              --input "dist\latest.yml"
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 