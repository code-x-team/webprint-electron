---
globs: modules/printer.js,renderer/**/*.js
---
# PDF 및 인쇄 처리 패턴

## PDF 생성 전략

### 단일 PDF 생성 (병합)
```javascript
// ✅ 여러 요소를 하나의 PDF로 병합
async function generatePDF(url, paperSize, printSelector, rotate180 = false) {
  const pdfWindow = new BrowserWindow({
    show: false,
    width: 1200,
    height: 1600,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      webSecurity: false,
      offscreen: true,
      backgroundThrottling: false
    }
  });
  
  try {
    // URL 로드 및 렌더링 대기
    await pdfWindow.loadURL(url);
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // 대상 요소들을 선택하여 재구성
    await pdfWindow.webContents.executeJavaScript(`
      (function() {
        const targetElements = document.querySelectorAll('${printSelector}');
        if (targetElements.length > 0) {
          document.body.innerHTML = '';
          
          targetElements.forEach((element, index) => {
            const cloned = element.cloneNode(true);
            
            // 각 요소에 페이지 스타일 적용
            cloned.style.cssText = \`
              width: ${paperSize.width}mm !important;
              height: ${paperSize.height}mm !important;
              margin: 0 auto !important;
              transform: ${rotate180 ? 'rotate(180deg)' : 'none'} !important;
              transform-origin: center center !important;
              page-break-after: \${index < targetElements.length - 1 ? 'always' : 'auto'} !important;
            \`;
            
            document.body.appendChild(cloned);
          });
        }
      })()
    `);
    
    // PDF 생성 옵션
    const pdfOptions = {
      pageSize: 'A4',
      marginsType: 1,
      margins: { top: 0, bottom: 0, left: 0, right: 0 },
      printBackground: true,
      landscape: false
    };
    
    const pdfBuffer = await pdfWindow.webContents.printToPDF(pdfOptions);
    return pdfBuffer;
    
  } finally {
    if (pdfWindow && !pdfWindow.isDestroyed()) {
      pdfWindow.close();
    }
  }
}
```

### 개별 페이지 PDF 생성
```javascript
// ✅ 각 요소를 개별 PDF로 생성
async function generatePDFByIndex(url, paperSize, printSelector, index, rotate180 = false) {
  const pdfWindow = new BrowserWindow({
    show: false,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      webSecurity: false,
      offscreen: true
    }
  });
  
  try {
    await pdfWindow.loadURL(url);
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // 특정 인덱스의 요소만 추출
    await pdfWindow.webContents.executeJavaScript(`
      (function() {
        const elements = document.querySelectorAll('${printSelector}');
        if (elements[${index}]) {
          document.body.innerHTML = '';
          const element = elements[${index}].cloneNode(true);
          
          // 스타일 적용
          element.style.cssText = \`
            width: ${paperSize.width}mm !important;
            height: ${paperSize.height}mm !important;
            margin: 0 auto !important;
            transform: ${rotate180 ? 'rotate(180deg)' : 'none'} !important;
          \`;
          
          document.body.appendChild(element);
        }
      })()
    `);
    
    const pdfBuffer = await pdfWindow.webContents.printToPDF({
      pageSize: 'A4',
      marginsType: 1,
      printBackground: true
    });
    
    return pdfBuffer;
    
  } finally {
    if (pdfWindow && !pdfWindow.isDestroyed()) {
      pdfWindow.close();
    }
  }
}
```

## 인쇄 실행 패턴

### 메인 인쇄 함수
```javascript
// ✅ 통합 인쇄 처리
async function printViaPDF(url, paperSize, printSelector, copies, silent, printerName, outputType = 'pdf', rotate180 = false) {
  try {
    // 요소 개수 확인
    const elementCount = await getElementCount(url, printSelector);
    console.log(`발견된 요소 개수: ${elementCount}`);
    
    if (outputType === 'pdf') {
      // PDF 미리보기 모드
      const pdfBuffer = await generatePDF(url, paperSize, printSelector, rotate180);
      const pdfPath = await savePermanentPDF(pdfBuffer);
      await openPDFPreview(pdfPath);
      
      return { 
        success: true, 
        pdfPath, 
        message: `${elementCount}개 페이지 PDF가 생성되었습니다`,
        shouldClose: true 
      };
      
    } else {
      // 프린터 출력 모드
      console.log(`개별 PDF 생성 시작 - 총 ${elementCount}개 페이지`);
      
      for (let i = 0; i < elementCount; i++) {
        try {
          // 진행 상황 알림
          const currentPage = i + 1;
          console.log(`${currentPage}/${elementCount} 페이지 처리 중...`);
          
          // 개별 PDF 생성
          const pdfBuffer = await generatePDFByIndex(url, paperSize, printSelector, i, rotate180);
          const tempPdfPath = await saveTempPDF(pdfBuffer, `page_${currentPage}`);
          
          // 프린터로 전송
          const printOptions = {
            printer: printerName === 'system-default' ? undefined : printerName,
            copies: 1,
            silent: silent
          };
          
          await ptp.print(tempPdfPath, printOptions);
          
          // 임시 파일 정리
          setTimeout(async () => {
            await fs.unlink(tempPdfPath).catch(() => {});
          }, 5000);
          
        } catch (pageError) {
          console.error(`페이지 ${i + 1} 처리 실패:`, pageError);
        }
      }
      
      return { 
        success: true, 
        shouldClose: true, 
        message: `${elementCount}개 페이지가 프린터로 전송되었습니다.`
      };
    }
    
  } catch (error) {
    // 사용자 친화적 에러 메시지
    let errorMessage = error.message;
    
    if (error.message.includes('ERR_NAME_NOT_RESOLVED')) {
      errorMessage = 'URL에 접근할 수 없습니다. 인터넷 연결을 확인해주세요.';
    } else if (error.message.includes('printer')) {
      errorMessage = '프린터 오류가 발생했습니다. 프린터 연결을 확인해주세요.';
    }
    
    throw new Error(errorMessage);
  }
}
```

## 파일 관리 패턴

### PDF 저장 전략
```javascript
// ✅ 영구 PDF 저장 (Downloads/WebPrinter)
async function savePermanentPDF(pdfBuffer) {
  const saveDirectory = path.join(os.homedir(), 'Downloads', 'WebPrinter');
  await fs.mkdir(saveDirectory, { recursive: true });
  
  // 타임스탬프 기반 파일명
  const timestamp = new Date().toISOString()
    .replace(/[:.]/g, '-')
    .replace('T', '_')
    .substring(0, 19);
  
  const fileName = `WebPrinter_${timestamp}.pdf`;
  const filePath = path.join(saveDirectory, fileName);
  
  await fs.writeFile(filePath, pdfBuffer);
  return filePath;
}

// ✅ 임시 PDF 저장
async function saveTempPDF(pdfBuffer, pagePrefix = '') {
  const tempDir = os.tmpdir();
  const prefix = pagePrefix ? `${pagePrefix}_` : '';
  const tempFileName = `webprinter_temp_${prefix}${Date.now()}.pdf`;
  const tempPath = path.join(tempDir, tempFileName);
  
  await fs.writeFile(tempPath, pdfBuffer);
  return tempPath;
}
```

### PDF 미리보기
```javascript
// ✅ 크로스 플랫폼 PDF 미리보기
async function openPDFPreview(pdfPath) {
  const { exec } = require('child_process');
  const util = require('util');
  const execAsync = util.promisify(exec);
  
  try {
    if (process.platform === 'win32') {
      await execAsync(`start "" "${pdfPath}"`);
    } else if (process.platform === 'darwin') {
      await execAsync(`open "${pdfPath}"`);
    } else {
      await execAsync(`xdg-open "${pdfPath}"`);
    }
  } catch (error) {
    throw new Error('PDF 뷰어 실행 실패');
  }
}
```

## 프린터 관리

### 프린터 목록 조회
```javascript
// ✅ 시스템 프린터 목록
async function getPrinters() {
  try {
    const printers = await ptp.getPrinters();
    
    // 시스템 기본 프린터 옵션 추가
    return [
      { 
        name: 'system-default', 
        displayName: '시스템 기본 프린터', 
        isDefault: true 
      },
      ...printers.map(printer => ({
        name: printer.name,
        displayName: printer.name,
        isDefault: printer.isDefault || false
      }))
    ];
  } catch (error) {
    console.error('프린터 목록 조회 실패:', error);
    // 실패 시 기본 옵션만 반환
    return [{ 
      name: 'system-default', 
      displayName: '시스템 기본 프린터', 
      isDefault: true 
    }];
  }
}
```

## 정리 작업

### 오래된 PDF 자동 삭제
```javascript
// ✅ 24시간 이상 된 PDF 파일 정리
async function cleanupOldPDFs() {
  try {
    const webprinterDir = path.join(os.homedir(), 'Downloads', 'WebPrinter');
    
    const exists = await fs.access(webprinterDir)
      .then(() => true)
      .catch(() => false);
      
    if (!exists) return;
    
    const files = await fs.readdir(webprinterDir);
    const now = Date.now();
    const maxAge = 24 * 60 * 60 * 1000; // 24시간
    
    for (const file of files) {
      if (!file.startsWith('WebPrinter_') || !file.endsWith('.pdf')) {
        continue;
      }
      
      const filePath = path.join(webprinterDir, file);
      
      try {
        const stats = await fs.stat(filePath);
        if (now - stats.mtime.getTime() > maxAge) {
          await fs.unlink(filePath);
          console.log(`오래된 PDF 삭제: ${file}`);
        }
      } catch (fileError) {
        // 파일 삭제 실패 무시
      }
    }
  } catch (error) {
    console.error('PDF 정리 중 오류:', error);
  }
}
```

## CSS 인쇄 스타일

### 인쇄 전용 스타일 주입
```javascript
// ✅ 인쇄 최적화 CSS
await pdfWindow.webContents.insertCSS(`
  @page {
    margin: 0mm 0mm 0mm 0mm; 
    padding: 0;
    size: A4;
  }
  
  @media print {
    body {
      padding: 0;
      margin: 0;
    }
    
    .print-content {
      padding: 0;
      margin: 0;
    }
    
    /* 불필요한 요소 숨기기 */
    .no-print {
      display: none !important;
    }
  }
`);
```